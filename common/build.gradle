apply plugin: 'kotlin-multiplatform'

//final def os = org.gradle.internal.os.OperatingSystem.current()

def hostPreset = MPPTools.defaultHostPreset(project, [kotlin.presets.mingwX64, kotlin.presets.macosX64, kotlin.presets.linuxX64])

kotlin {
    /*final def hostPreset = os.isWindows() ? presets.mingwX64
            : os.isLinux()   ? presets.linuxX64
            : os.isMacOsX()  ? presets.macosX64
            : null*/
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            }
        }
        nativeMain {
            dependencies {
                //implementation 'org.jetbrains.kotlin:kotlin-stdlib-native'
                //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
            }
        }
        /*jniMain {
            dependencies {
            }
        }
        cMain {
            dependencies {
            }
        }*/
        /*configure([windowsMain, linuxMain, macMain]) {
            dependsOn nativeMain
        }*/
        /*configure([jniMain, nativeMain]) {
            dependsOn cMain
        }*/
    }
    targets {
        fromPreset(hostPreset, 'native') {
            compilations.main {
                cinterops {
                    capi {
                        packageName 'alt.v.c'
                        extraOpts '-nodefaultlibs'
                        includeDirs "${System.getProperty("user.dir")}"
                    }
                }
            }
        }
        /*fromPreset(hostPreset, 'c') {
            compilations.main {
                cinterops {
                    capi {
                        packageName 'alt.v.c'
                        extraOpts '-nodefaultlibs'
                        includeDirs "${System.getProperty("user.dir")}"
                    }
                }
            }
        }
        fromPreset(hostPreset, 'jni') {
            compilations.main {
                cinterops {
                    jni {
                        packageName 'alt.v.jni'
                        extraOpts '-nodefaultlibs'
                        includeDirs "${System.getProperty("user.dir")}"
                    }
                    capi {
                        packageName 'alt.v.c'
                        extraOpts '-nodefaultlibs'
                        includeDirs "${System.getProperty("user.dir")}"
                    }
                }
            }
        }*/
        /*fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.mingwX64, 'windows')
        fromPreset(presets.linuxX64, 'linux')
        fromPreset(presets.macosX64, 'mac')
        configure([windows, linux, mac]) {
            compilations.main {
                cinterops {
                    capi {
                        packageName 'alt.v.c'
                        extraOpts '-nodefaultlibs'
                        includeDirs "${System.getProperty("user.dir")}"
                    }
                }
            }
        }*/
    }
}
