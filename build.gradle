
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"

    // Publishing
    id "maven"
}

// Config
//def siteUrl = 'https://gitlab.com/7Hazard/altv-kotlin'
//def gitUrl = 'https://gitlab.com/7Hazard/altv-kotlin.git'
//
//version = "" //"DEV-"+new Date().format('dd-MMM-yyyy', TimeZone.getTimeZone('GMT'))
//if (System.properties.containsKey("version")){
//    version = System.getProperty("version")
//    println "Version is $version"
//}
//

repositories {
    jcenter()
    mavenCentral()

    maven { url  "https://jitpack.io" }
}

dependencies {
    implementation 'com.gitlab.7Hazard:altv-jvm-module:master-SNAPSHOT'
    // implementation files('D:/src/altv-jvm-module/build/win32/altv-jvm-module/altv-jvm-module.jar')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'hazard7.altv.kotlin.MainKt'
        )
    }

    // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    // from configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    from sourceSets.main.allSource
}

task pluginMetadata()  {
    doLast {
        new File("$projectDir/build/libs/plugin.cfg").text =
                """${project.name}.jar
hazard7.altv.kotlin.MainKt"""
    }
}
jar.finalizedBy pluginMetadata


///
/// Publishing
///

// task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
// }
// jar.finalizedBy sourcesJar

// task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    javadoc.failOnError(false);
//    javadoc.source = sourceSets.main.allSource
//    from javadoc.destinationDir
// }

//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}
